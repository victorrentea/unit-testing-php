<?php

namespace App\Tests\Service;

use App\Service\LanguageIntegrationService;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\Session;

class LanguageIntegrationServiceTest extends TestCase
{
    /** @var LanguageIntegrationService */
    protected $languageIntegrationService;

    /** @var Session|\PHPUnit_Framework_MockObject_MockObject */
    protected $sessionMock;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->sessionMock = static::createMock(Session::class);

        $this->languageIntegrationService = new LanguageIntegrationService(
            $this->sessionMock,
            'en'
        );
    }

    public function testGetLocale()
    {
        $this->sessionMock
            ->expects($this->once())
            ->method('isStarted')
            ->willReturn(true);

        $this->sessionMock
            ->expects($this->once())
            ->method('get')
            ->willReturn(null);

        $this->assertEquals('en', $this->languageIntegrationService->getLocale());
    }

    public function testSetLocale()
    {
        $this->sessionMock
            ->expects($this->once())
            ->method('isStarted')
            ->willReturn(true);

        $this->sessionMock
            ->expects($this->once())
            ->method('set')
            ->willReturn(null);

        $this->assertEquals(
            $this->languageIntegrationService,
            $this->languageIntegrationService->setLocale('ro')
        );
    }

    public function testGetDefaultLocale()
    {
        $this->assertEquals(
            'en',
            $this->languageIntegrationService->getDefaultLocale()
        );
    }

    public function testGetLocaleRedirect()
    {
        $this->assertNull($this->languageIntegrationService->getLocaleRedirect(new Request()));
    }
}